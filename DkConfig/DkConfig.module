<?php namespace ProcessWire;

class DkConfig extends Process {

	static protected $defaults = [
        'Global' => [
            'project-title' => 'PAGENAME',
        ],
        'DkTemplate' => [
            'active_packages' => [],
            'available_packages' => [
                'bootstrap' => [
                    'package' => 'bootstrap',
                    'js' => ['js/jquery.slim.min.js','js/popper.min.js','js/bootstrap.min.js'],
                    'css' => ['css/bootstrap.min.css'],
                    'title' => 'Bootstrap 4',
                    'version' => 'v4.3.1',
                ],
                'fontawesome-all-css' => [
                    'package' => 'fontawesome',
                    'js' => [],
                    'css' => ['css/all.min.css'],
                    'title' => 'FontAwesome Icon Pack (All CSS)',
                    'version' => 'v5.7.2',
                ],
                'fontawesome-all-js' => [
                    'package' => 'fontawesome',
                    'js' => ['js/all.min.js'],
                    'css' => [],
                    'title' => 'FontAwesome Icon Pack (All JS)',
                    'version' => 'v5.7.2',
                ],
            ],
            'js' => [
                'files' => ['scripts/source/main.js'],
                'outputPath' => 'scripts/cache/',
                'customPath' => 'scripts/templates/',
                'customTemplates' => [],
            ],
            'sass' => [
                'files' => ['styles/sass/main.scss'],
                'outputPath' => 'styles/cache/',
                'customPath' => 'styles/templates/',
                'customTemplates' => [],
            ],
            'meta' => [
                'viewport' => 'width=device-width, initial-scale=1',
            ],
            'login' => [
                'lockedTemplates' => [],
                'loginTemplate' => 'include/login.php',
            ],
            'template' => [
                'title' => '{{project-name}} - {{page-name}}',
                'checkEveryVisit' => true,
                'hash' => '',
                'cachePath' => 'include/cache/',
                'customHead' => '',
                'customFoot' => '',
            ],
        ],
        'DkForms' => [
            'create_templates' => [],
            'createChildren_templates' => [],
            'save_templates' => [],
            'delete_templates' => [],
            'custom_actions' => [],
        ],
        'DkNavbar' => [
            'selector' => 'sort=title',
            'activeClass' => 'active',
            'openClass' => 'open',
            'itemTemplate' => '<a class="{{ACTIVE}}" href="{{URL}}">{{TITLE}}</a>',
            'parentTemplate' => '<a href="{{URL}}">{{TITLE}}</a><div>{{CHILDREN}}</div>',
            'childTemplate' => '<a class="{{ACTIVE}}" href="{{URL}}">{{TITLE}}</a>',
            'containerTemplate' => '<div>{{ITEMS}}</div>',
            'navbarPath' => 'include/navbar.php',
        ],
        'DkMultidomain' => [
            'assignement' => [],
        ],
    ];

	public static function getModuleInfo() {
		return array(
			'title' => 'DkConfig', 
			'version' => 1, 
			'summary' => 'DK - Config Page',
			'icon' => 'kiwi-bird', 
			'requires' => ['InputfieldDKEditor','DkCore'],
        );
	}
	public function __construct() {
        $this->setArray(self::$defaults);
        $this->checkConfig();
    }

	public function init() {
        // Add Hooks
		$this->addHookBefore('Page::render', $this, 'pageRender'); 
	}	
    
    public function ___install() {
        $newPageGroup = $this->pages->get($this->config->urls->admin.'dk/');

        // Create Config Page
        $newPage = new Page;
        $newPage->parent = $newPageGroup;
        $newPage->template = 'admin';
        $newPage->title = 'Config';
        $newPage->name = 'config';
        $newPage->process = 'DkConfig';
        $newPage->save();
    }
    
    // Sets Default Config
    public function checkConfig() {
        $config = $this->modules->getConfig('DkCore');
		$config = is_array($config) ? $config : [];
		$config = array_merge(self::$defaults,$config);
		$config['DkTemplate']['available_packages'] = is_array($config['DkTemplate']['available_packages']) ? $config['DkTemplate']['available_packages'] : [];
		$config['DkTemplate']['available_packages'] = array_merge($config['DkTemplate']['available_packages'],self::$defaults['DkTemplate']['available_packages']);
		$this->modules->saveConfig('DkCore',$config);
    }

    public function ___installl() {
        /*// Create Config Page
		$newPage = new Page;
		$newPage->parent = $this->pages->findOne('/dk/');
		$newPage->template = 'admin';
		$newPage->title = 'Config';
		$newPage->name = 'config';
		$newPage->process = 'DkConfig';
		$newPage->save();*/
    }

    public function ___execute() {
        $config = $this->modules->getConfig('DkCore');

		// Create Page and Form
        $page = $this->modules->get('InputfieldFieldset');
		$form = $this->modules->get('InputfieldForm');
        $form->action = './save';
        
        // Add Text Field
		$inputField = $this->modules->get('InputfieldDKEditor');
		$inputField->label = "Config-YAML";
		$inputField->name = "config";
		$inputField->language = "yaml";
		$inputField->value = yaml_emit($config);
		$form->add($inputField);
		
		$inputField = $this->modules->get('InputfieldCheckbox');
		$inputField->label = "Debug";
		$inputField->name = "debug";
		$inputField->value = 'debug';
		$inputField->checked = $this->config->debug;
		$form->add($inputField);

		// Add Save Button
		$button = $this->modules->get('InputfieldSubmit');
		$button->value = 'Save';
		$button->icon = 'floppy-o';
		$form->add($button);

		// Add Form to Page and render
		$page->add($form);
		return $page->render();
    }

    public function ___executeSave() {
        // Throws Exception if it isn't a submited form
		if(!$this->input->post('submit')) throw new Wire404Exception();

		// Get Config
		$config = $this->modules->getConfig('DkCore');

		// Set Config from Input
        $config = yaml_parse($this->input->post('config'));
        if($this->input->post('debug') != $this->config->debug) {
            $configContents = file_get_contents($this->config->paths->root.'site/config.php');

            if($this->input->post('debug'))
                $configContents = str_replace('$config->debug = false;','$config->debug = true;',$configContents);
            else
                $configContents = str_replace('$config->debug = true;','$config->debug = false;',$configContents);
            file_put_contents($this->config->paths->root.'site/config.php',$configContents);
        }
        
		// Try to save settings
		if($this->modules->saveConfig('DkCore',$config))
			$this->message('Saved');
		else
			$this->message('Error While Saving!');

		// redirect to the previous page
		$this->session->redirect('./');
    }

    // Defines DK_Config Constant on Page Render
    public function pageRender() {
        $config = $this->modules->getConfig('DkCore');
        define('DK_Config',$config);
    }


}
