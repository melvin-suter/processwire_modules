<?php namespace ProcessWire;

class DkFormsAdmin extends Process {

	public static function getModuleInfo() {

		return array(
			'title' => 'DkFormsAdmin', 
			'version' => 1, 
			'summary' => 'Settings Page to my custom form-functions',
			'href' => '',
			'icon' => 'smile-o', 
			'page' => [
			  'name' => 'dk-forms',
			  'title' => 'DK-Forms',
			],
			);
	}

	public function getFieldTyp($field)
	{
		$type = "";
		switch($field->type)
		{
			case 'FieldtypeYaml':
				$type = 'yamlFields';
				break;

			case 'FieldtypePage':
				$type = 'pageFields';
				break;

			case 'FieldtypeFile':
			case 'FieldtypeImage':
				$type = 'fileFields';
				break;

			default:
				$type = 'normalFields';
				break;
		}
		return $type;
	}

	public function ___execute() {
		$config = $this->modules->getConfig('DkFormsCore');

		$page = $this->modules->get('InputfieldFieldset');
		$page->label = '';

		foreach($this->templates as $template) 
		{	
			$fieldset = $this->modules->get('InputfieldFieldset');
			$fieldset->label = $template->name;
			$page->add($fieldset);
			$form = $this->modules->get('InputfieldForm');
			$form->action = './save';
			$fieldset->add($form);

			$aField = $this->modules->get('InputfieldHidden');
			$aField->name = 'template_name';
			$aField->value = $template->name;
			$form->add($aField);
			
			foreach($template->fields as $field) 
			{	
				$fieldType = $this->getFieldTyp($field);
				$aField = $this->modules->get('InputfieldHidden');
				$aField->value = $fieldType;
				$aField->name = "fieldtype_".$field->name;
				$form->add($aField);

				switch($fieldType)
				{
					case 'fileFields':
						$aField = $this->modules->get('InputfieldMarkup');
						$aField->label = 'Field-Name';
						$aField->value = $field->name;
						$aField->columnWidth = 35;
						$form->add($aField);

						$aField = $this->modules->get('InputfieldMarkup');
						$aField->label = 'Field-Typ';
						$aField->value = $fieldType;
						$aField->columnWidth = 35;
						$form->add($aField);

						$aField = $this->modules->get('InputfieldCheckbox');
						$aField->name = "field_".$field->name;
						$aField->label = 'Active';
						$aField->checked = isset($config[$template->name][$fieldType][$field->name]);
						$aField->columnWidth = 30;
						$form->add($aField);

						$subFieldset = $this->modules->get('InputfieldFieldset');
						$subFieldset->collapsed(true);
						$subFieldset->label = $field->name." - Settings";
						
							$aField = $this->modules->get('InputfieldText');
							$aField->name = "fieldextensions_".$field->name;
							$aField->label = 'Extensions';
							$aField->value = isset($config[$template->name][$fieldType][$field->name]['extensions']) ? implode(',',$config[$template->name][$fieldType][$field->name]['extensions']) : 'jpg, jpeg, png, gif';
							$aField->columnWidth = 50;
							$subFieldset->add($aField);

						$form->add($subFieldset);
					break;

					case 'pageFields':
						$aField = $this->modules->get('InputfieldMarkup');
						$aField->label = 'Field-Name';
						$aField->value = $field->name;
						$aField->columnWidth = 35;
						$form->add($aField);

						$aField = $this->modules->get('InputfieldMarkup');
						$aField->label = 'Field-Typ';
						$aField->value = $fieldType;
						$aField->columnWidth = 35;
						$form->add($aField);

						$aField = $this->modules->get('InputfieldCheckbox');
						$aField->name = "field_".$field->name;
						$aField->label = 'Active';
						$aField->checked = isset($config[$template->name][$fieldType][$field->name]);
						$aField->columnWidth = 30;
						$form->add($aField);

						$subFieldset = $this->modules->get('InputfieldFieldset');
						$subFieldset->collapsed(true);
						$subFieldset->label = $field->name." - Settings";
						
							$aField = $this->modules->get('InputfieldText');
							$aField->name = "fieldtemplate_".$field->name;
							$aField->label = 'Template';
							$aField->value = isset($config[$template->name][$fieldType][$field->name]['template']) ? $config[$template->name][$fieldType][$field->name]['template'] : 'example';
							$aField->columnWidth = 50;
							$subFieldset->add($aField);

							$aField = $this->modules->get('InputfieldText');
							$aField->name = "fieldparent_".$field->name;
							$aField->label = 'Parent';
							$aField->value = isset($config[$template->name][$fieldType][$field->name]['parent']) ? $config[$template->name][$fieldType][$field->name]['parent'] : '/data/example/';
							$aField->columnWidth = 50;
							$subFieldset->add($aField);
						$form->add($subFieldset);
					break;

					case 'yamlFields':
						$aField = $this->modules->get('InputfieldMarkup');
						$aField->label = 'Field-Name';
						$aField->value = $field->name;
						$aField->columnWidth = 35;
						$form->add($aField);

						$aField = $this->modules->get('InputfieldMarkup');
						$aField->label = 'Field-Typ';
						$aField->value = $fieldType;
						$aField->columnWidth = 35;
						$form->add($aField);

						$aField = $this->modules->get('InputfieldCheckbox');
						$aField->name = "field_".$field->name;
						$aField->label = 'Active';
						$aField->checked = isset($config[$template->name][$fieldType][$field->name]);
						$aField->columnWidth = 30;
						$form->add($aField);

						$subFieldset = $this->modules->get('InputfieldFieldset');
						$subFieldset->collapsed(true);
						$subFieldset->label = $field->name." - Settings";

							$aField = $this->modules->get('InputfieldText');
							$aField->name = "fieldmode_".$field->name;
                                                        $aField->label = 'Type';
                                                        $aField->value = isset($config[$template->name][$fieldType][$field->name]['mode']) ? $config[$template->name][$fieldType][$field->name]['mode'] : 'keypair';
                                                        $aField->columnWidth = 100;
                                                        $subFieldset->add($aField);

							$aField = $this->modules->get('InputfieldText');
							$aField->name = "fieldkey_".$field->name;
							$aField->label = 'Key Prefix';
							$aField->value = isset($config[$template->name][$fieldType][$field->name]['key']) ? $config[$template->name][$fieldType][$field->name]['key'] : 'key_';
							$aField->columnWidth = 50;
							$subFieldset->add($aField);

							$aField = $this->modules->get('InputfieldText');
							$aField->name = "fieldvalue_".$field->name;
							$aField->label = 'Value Prefix';
							$aField->value = isset($config[$template->name][$fieldType][$field->name]['value']) ? $config[$template->name][$fieldType][$field->name]['value'] : 'value_';
							$aField->columnWidth = 50;
							$subFieldset->add($aField);
						$form->add($subFieldset);
					break;

					default:
						$aField = $this->modules->get('InputfieldMarkup');
						$aField->label = 'Field-Name';
						$aField->value = $field->name;
						$aField->columnWidth = 35;
						$form->add($aField);

						$aField = $this->modules->get('InputfieldMarkup');
						$aField->label = 'Field-Typ';
						$aField->value = $fieldType;
						$aField->columnWidth = 35;
						$form->add($aField);

						$aField = $this->modules->get('InputfieldCheckbox');
						$aField->name = "field_".$field->name;
						$aField->label = 'Active';
						$aField->checked = in_array($field->name,$config[$template->name][$fieldType]);
						$aField->columnWidth = 30;
						$form->add($aField);
					break;
				}
			}

			$button = $this->modules->get('InputfieldSubmit');
			$button->value = 'Save';
			$button->icon = 'floppy-o';
			$form->add($button);
		}
	  
		return $page->render();
	  }

	  public function ___executeSave() 
	  {
		if(!$this->input->post('submit')) throw new Wire404Exception();
		
		$data = $this->modules->getConfig('DkFormsCore');

		$data[$this->input->post('template_name')] = ['normalFields' => [],'pageFields' => [],'yamlFields' => [],'fileFields' => []];

		foreach($this->input->post() as $key => $value)
		{
			if(substr($key,0,6) == 'field_')
			{
				$fieldName = substr($key,6);
				$fieldType = $this->input->post('fieldtype_'.$fieldName);
				switch($fieldType)
				{
					case 'pageFields':
						$newData = [];
						$newData['template'] = $this->input->post('fieldtemplate_'.$fieldName);
						$newData['parent'] = $this->input->post('fieldparent_'.$fieldName);
						$data[$this->input->post('template_name')][$fieldType][$fieldName] = $newData;
						break;
					case 'fileFields':
						$newData = [];
						$extensions = $this->input->post('fieldextensions_'.$fieldName);
						$newData['extensions'] = array_map('trim', explode(',', $extensions));
						$data[$this->input->post('template_name')][$fieldType][$fieldName] = $newData;
						break;
					case 'yamlFields':
						$newData = [];
						$newData['mode'] = $this->input->post('fieldmode_'.$fieldName);
						$newData['key'] = $this->input->post('fieldkey_'.$fieldName);
						$newData['value'] = $this->input->post('fieldvalue_'.$fieldName);
						$data[$this->input->post('template_name')][$fieldType][$fieldName] = $newData;
						break;
					default: 
						array_push($data[$this->input->post('template_name')][$fieldType],$fieldName);
						break;
				}
			}
		}

		if($this->modules->saveConfig('DkFormsCore',$data))
			$this->message('Saved');
		else
			$this->message('Error While Saving!');

		// redirect to our dashboard
		$this->session->redirect('./');
	  }
}
